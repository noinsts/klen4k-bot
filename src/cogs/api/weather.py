import os
import random
from datetime import datetime

import requests
import discord
from discord.ext import commands
from dotenv import load_dotenv

from src.cogs.base import BaseCog


class Weather(BaseCog):
    def __init__(self, bot):
        super().__init__(bot)


    @staticmethod
    def api_key():
        load_dotenv()
        return os.getenv('WEATHER_API')


    @commands.hybrid_command(
        name = 'weather',
        description = '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≥–æ–¥—É –ø–æ –≤–∫–∞–∑–∞–Ω–æ–º—É –º—ñ—Å—Ç—É'
    )
    async def weather(self, ctx, city: str = None):
        if not city:
            saved_city = self.db.location.get_city(ctx.author.id)
            if saved_city:
                city = saved_city
            else:
                await ctx.send('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')
                return

        base_url = 'http://api.openweathermap.org/data/2.5/weather'
        api_key = self.api_key()

        params = {
            "q" : city,
            "appid" : api_key,
            "units" : "metric"
        }

        response = requests.get(base_url, params=params)

        if response.status_code == 200:
            data = response.json()

            temp = data['main']['temp']
            humid = data['main']['humidity']
            desc = data['weather'][0]['description']
            city = data['name']
            country = f':flag_{data['sys']['country'].lower()}:'
            timezone_offset = data["timezone"]  # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö
            sunrise = datetime.utcfromtimestamp(data["sys"]["sunrise"] + timezone_offset).strftime('%H:%M:%S')
            sunset = datetime.utcfromtimestamp(data["sys"]["sunset"] + timezone_offset).strftime('%H:%M:%S')


            weather_descriptions = {
                "clear sky": ("–Ø—Å–Ω–µ –Ω–µ–±–æ ‚òÄÔ∏è", 0xFFFF00),  # –ñ–æ–≤—Ç–∏–π –¥–ª—è —è—Å–Ω–æ–≥–æ –Ω–µ–±–∞
                "few clouds": ("–ú–∞–ª–æ —Ö–º–∞—Ä Ô∏è", 0xADD8E6),  # –°–≤—ñ—Ç–ª–æ-—Å–∏–Ω—ñ–π –¥–ª—è –º–∞–ª–æ—ó —Ö–º–∞—Ä–Ω–æ—Å—Ç—ñ
                "scattered clouds": ("–†–æ–∑–∫–∏–¥–∞–Ω—ñ —Ö–º–∞—Ä–∏ ‚õÖ", 0x87CEEB),  # –°–∏–Ω—ñ–π –¥–ª—è —Ä–æ–∑–∫–∏–¥–∞–Ω–∏—Ö —Ö–º–∞—Ä
                "broken clouds": ("–†–æ–∑—ñ—Ä–≤–∞–Ω—ñ —Ö–º–∞—Ä–∏ ‚òÅÔ∏è", 0x778899),  # –°—ñ—Ä–∏–π –¥–ª—è —Ä–æ–∑—ñ—Ä–≤–∞–Ω–∏—Ö —Ö–º–∞—Ä
                "shower rain": ("–ó–ª–∏–≤–∞ Ô∏è", 0x1E90FF),  # –°–∏–Ω—ñ–π –¥–ª—è –∑–ª–∏–≤–∏
                "rain": ("–î–æ—â ‚òî", 0x4169E1),  # –¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π –¥–ª—è –¥–æ—â—É
                "thunderstorm": ("–ì—Ä–æ–∑–∞ ‚õàÔ∏è", 0x800080),  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π –¥–ª—è –≥—Ä–æ–∑–∏
                "snow": ("–°–Ω—ñ–≥ ‚ùÑÔ∏è", 0xFFFFFF),  # –ë—ñ–ª–∏–π –¥–ª—è —Å–Ω—ñ–≥—É
                "mist": ("–¢—É–º–∞–Ω Ô∏è", 0xD3D3D3),  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π –¥–ª—è —Ç—É–º–∞–Ω—É
                "overcast clouds": ("–•–º–∞—Ä–Ω–æ ‚òÅÔ∏è", 0xA9A9A9)  # –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π –¥–ª—è —Ö–º–∞—Ä–Ω–æ—Å—Ç—ñ
            }

            weather_messages = {
                "clear sky": [
                    "–°–æ–Ω—Ü–µ —Å–≤—ñ—Ç–∏—Ç—å, –ø—Ç–∞—à–∫–∏ —Å–ø—ñ–≤–∞—é—Ç—å! –ß–∞—Å –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏! üåû",
                    "–ß–∏—Å—Ç–µ –Ω–µ–±–æ ‚Äì —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π! üö¥‚Äç‚ôÇÔ∏è",
                    "–û–∫—É–ª—è—Ä–∏ –Ω–µ –∑–∞–±—É–¥—å üòé"
                ],
                "few clouds": [
                    "–¢—Ä–æ—Ö–∏ —Ö–º–∞—Ä, –∞–ª–µ –∑–∞–≥–∞–ª–æ–º —á—É–¥–æ–≤–æ! üå§Ô∏è",
                    "–°–æ–Ω—Ü–µ –≤–∏–∑–∏—Ä–∞—î ‚Äì –≥–∞—Ä–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –∫–∞–≤–∏ –Ω–∞ –≤—É–ª–∏—Ü—ñ ‚òï",
                    "–ö—ñ–ª—å–∫–∞ —Ö–º–∞—Ä–∏–Ω–æ–∫ –Ω–µ –∑–∞–≤–∞–¥—è—Ç—å –≥–∞—Ä–Ω–æ–º—É –Ω–∞—Å—Ç—Ä–æ—é!"
                ],
                "rain": [
                    "–î–æ—â–∏—Ç—å? –°–∞–º–µ —á–∞—Å –¥–ª—è –≥–∞—Ä—è—á–æ–≥–æ —á–∞—é —ñ —Ñ—ñ–ª—å–º—É! üé¨‚òï",
                    "–Ø–∫—â–æ –≤–∏—Ö–æ–¥–∏—à ‚Äì –Ω–µ –∑–∞–±—É–¥—å –ø–∞—Ä–∞—Å–æ–ª—å–∫—É! ‚òÇÔ∏è",
                    "–ü–∞—Ä–∞—Å–æ–ª—å–∫–∞ –≥–æ–ª–æ–≤–Ω–∏–π –∞–∫—Å–µ—Å—É–∞—Ä –¥–Ω—è!"
                ],
                "snow": [
                    "–°–Ω—ñ–≥ –ª–µ—Ç–∏—Ç—å? –í–∏–π–¥–∏ —ñ –∑–ª—ñ–ø–∏ —Å–Ω—ñ–≥–æ–≤–∏–∫–∞! ‚õÑ",
                    "–Ü–¥–µ–∞–ª—å–Ω–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≥–∞—Ä—è—á–æ–≥–æ —à–æ–∫–æ–ª–∞–¥—É ‚òï",
                    "–ù–∞—Ä–µ—à—Ç—ñ —Å–ø—Ä–∞–≤–∂–Ω—è –∑–∏–º–∞! ‚ùÑÔ∏è"
                ],
                "thunderstorm": [
                    "–ì—Ä–∏–º–∏—Ç—å —ñ –±–ª–∏—Å–∫–∞—î! –¢—Ä–∏–º–∞–π—Å—è –ø–æ–¥–∞–ª—ñ –≤—ñ–¥ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –º—ñ—Å—Ü—å! ‚ö°",
                    "–Ø–∫—â–æ —á—É—î—à –≥—É—Ä–∫—ñ—Ç ‚Äì —Ü–µ –Ω–µ —Å–∞–±–≤—É—Ñ–µ—Ä —Å—É—Å—ñ–¥–∞! üòÜ",
                    "–ì—Ä–æ–∑–∞ ‚Äì –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –¥–ª—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∏ —ñ —Å–≤—ñ—á–æ–∫ üïØÔ∏è"
                    
                ],
                "overcast clouds": [
                    "–°—ñ—Ä–µ–Ω—å–∫–æ, –∞–ª–µ –±–µ–∑ –¥–æ—â—É. –°–∞–º–µ —á–∞—Å –¥–ª—è –∫–∞–≤–∏ ‚òï", 
                    "–ú–æ–∂–µ –∑–¥–∞—Ç–∏—Å—è –ø–æ—Ö–º—É—Ä–æ, –∞–ª–µ —Ü–µ –Ω–µ –ø—Ä–∏–≤—ñ–¥ —Å–∏–¥—ñ—Ç–∏ –≤–¥–æ–º–∞!"
                ]
            }

            translate_desc, embed_color = weather_descriptions.get(desc, (desc, discord.Color.blue()))

            advice = random.choice(weather_messages.get(desc, ["–ù–µ–º–∞—î –æ—Å–æ–±–ª–∏–≤–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π ü§∑"]))

            embed = discord.Embed(title=f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ {city}, {country}', color=embed_color)

            embed.add_field(name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', value=f'{temp}¬∞C', inline=False)
            embed.add_field(name='–í–æ–ª–æ–≥—ñ—Å—Ç—å', value=f'{humid}%', inline=False)
            embed.add_field(name='–û–ø–∏—Å', value=translate_desc, inline=False)
            embed.add_field(name='üåÑ –°—Ö—ñ–¥ —Å–æ–Ω—Ü—è', value=sunrise, inline=True)
            embed.add_field(name='üåá –ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è', value=sunset, inline=True)
            embed.add_field(name='üîÆ –ü–æ—Ä–∞–¥–∞', value=advice, inline=False)

            await ctx.send(embed=embed)
        else:
            await ctx.send("–ü–æ–º–∏–ª–∫–∞, –Ω–µ–≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º")
            return
        

    @commands.hybrid_command(
        name = 'set_location',
        description = '–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–∞—à–µ –º—ñ—Å—Ç–æ',
        aliases=['add_location']
    )
    async def set_location(self, ctx, city: str, country: str):
        if not city:
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –º—ñ—Å—Ç–æ.')
            return
        
        if not country:
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∫—Ä–∞—ó–Ω—É')
            return
        
        if self.db.location.get_city(ctx.author.id):
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –î–∞–Ω–Ω—ñ –ø—Ä–æ –º—ñ—Å—Ç–æ —Ç–∞ –∫—Ä–∞—ó–Ω—É –≤–∂–µ –¥–æ–¥–∞–Ω—ñ')
        else:
            self.db.location.add_location(ctx.author.id, city, country)
            await ctx.send(f"–£—Å–ø—ñ—Ö! –í–∞—à—É –ª–æ–∫–∞—Ü—ñ—é **{city}** —Ç–∞ **{country}** –¥–æ–¥–∞–Ω–æ –¥–æ –±–¥.")


    @commands.hybrid_command(
        name = 'change_location',
        description = '–ó–º—ñ–Ω—é—î –≤–∞—à–µ –º—ñ—Å—Ç–æ'
    )
    async def change_location(self, ctx, city: str, country: str):
        if not city:
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –º—ñ—Å—Ç–æ.')
            return

        if not country:
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∫—Ä–∞—ó–Ω—É')
            return
        
        self.db.location.edit_location(ctx.author.id, city, country)
        await ctx.send('–£—Å–ø—ñ—Ö! –í–∏ –∑–º—ñ–Ω–∏–ª–∏ –Ω–∞–∑–≤—É –≤–∞—à–∏—Ö –º—ñ—Å—Ç–∞ —Ç–∞ –∫—Ä–∞—ó–Ω–∏ –≤ –±–¥.')


    @commands.hybrid_command(
        name = 'del_location',
        description = '–í–∏–¥–∞—î –≤–∞—à–µ –º—ñ—Å—Ç–æ',
        alises=['delete_location']
    )
    async def del_location(self, ctx):
        self.db.location.delete_location(ctx.author.id)
        await ctx.send('–£—Å–ø—ñ—Ö! –í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é –∑ –±–¥.')

    def find_weather_type(self, city):
        base_url = 'http://api.openweathermap.org/data/2.5/weather'
        api_key = self.api_key()

        params = {
            "q" : city,
            "appid" : api_key
        }

        response = requests.get(base_url, params=params)

        if response.status_code == 200:
            data = response.json()

            type = data['weather'][0]['description']

            POSITIVE_WEATHER = {"clear sky", "few clouds", "scattered clouds", "broken clouds", "mist"}
            NEGATIVE_WEATHER = {"overcast clouds", "drizzle", "rain", "thunderstorm", "snow", "haze", 
                                "fog", "sand", "dust", "ash", "squall", "tornado"}
            
            if type in POSITIVE_WEATHER:
                return 'positive'
            elif type in NEGATIVE_WEATHER:
                return 'negative'
            else:
                return 'neutral'


    @commands.hybrid_command(
        name = 'add_weahter_advice',
        description = '–î–æ–¥–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É –ø–æ—Ä–∞–¥—É'
    )
    async def add_weather_advice(self, ctx, weather_type: str, *, activity: str): 
        if weather_type not in ['positive', 'negative']:
            await ctx.send('–ü–æ–º–∏–ª–∫–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ **positive** –∞–±–æ **negative**')
            return
        
        self.db.location.add_advice(ctx.author.id, weather_type, activity)
        await ctx.send('–£—Å–ø—ñ—Ö! –í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏ –¥–æ–¥–∞–Ω–æ.')


    @commands.hybrid_command(
        name = 'personalize_advice',
        description = '–ü—Ä–æ–ø–æ–Ω—É—î –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É –ø–æ—Ä–∞–¥—É'
    )
    async def personalize_advice(self, ctx):
        city = self.db.location.get_city(ctx.author.id)
        weather = self.find_weather_type(city)
        activities = self.db.location.find_advice(ctx.author.id, weather)

        if not city:
            await ctx.send('–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –º—ñ—Å—Ç–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ **.add_location**')

        if not activities:
            await ctx.send('–ù–µ–º–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π. –í–∏ –º–æ–∂–µ—Ç–µ —ó—Ö –¥–æ–¥–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ **.add_weather_advice**.')
            return

        if weather == 'positive':
            emoji = 'üåÑ'
            color = discord.Color.orange()
        else:
            emoji = 'üåô'
            color = discord.Color.blue()

        embed = discord.Embed(
            title=f'ùíÄùíêùíñùíì ùíëùíÜùíìùíîùíêùíèùíÇùíçùíäùíõùíÜ ùíÇùíÖùíóùíäùíÑùíÜ {emoji}', 
            description=random.choice(activities)[0],
            color=color
        )

        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(Weather(bot))
